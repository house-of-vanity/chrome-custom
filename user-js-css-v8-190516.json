{"libs":[{"name":"jQuery 3","src":"@extension@jquery.min.js"},{"name":"plain-draggable","src":"https://raw.githubusercontent.com/anseki/plain-draggable/master/plain-draggable.min.js"}],"settings":{"badgeCounter":false,"editorConfig":{"enableBasicAutocompletion":false,"enableLiveAutocompletion":true,"enableSnippets":true,"fontSize":15,"highlightActiveLine":false,"keyboardHandler":false,"showPrintMargin":false,"tabSize":4,"theme":"ace/theme/github","useSoftTabs":false,"useWorker":true,"wrap":true},"supportBtn":false,"themesFolder":["chrome","clouds","dawn","dracula","dreamweaver","eclipse","github","monokai","solarized_dark","solarized_light","textmate","tomorrow","tomorrow_night","twilight"],"version":8},"sites":[{"compiledCss":"#desu-helper {z-index: 90000!important;}#footer {display: none!important;}#tempo-bar:hover {opacity: 0.2!important;}.CodeMirrorIponweb {font-family: monospace!important; height: 80vh!important; width: 95vw!important;}.aui-blanket {z-index: -1!important;}","css":"#desu-helper {\n    z-index: 90000;\n}\n\n#footer {\n    display: none;\n}\n\n#tempo-bar:hover {\n    opacity: 0.2;\n}\n\n.CodeMirrorIponweb {\n    font-family: monospace;\n    height: 80vh;\n    width: 95vw;\n}\n\n.aui-blanket {\n    z-index: -1;\n}\n\n","id":"jira.iponweb.net","js":"var helper_button = `\n<li><a id=\"desu-helper\" onclick=\"fill_project()\" class=\"aui-button aui-button-primary aui-style \"\n        href=\"#\">DesuHelper</a></li>\n`;\n\n$(window).load(function(){ \n    $('#create-menu').after(helper_button);\n\n\n})\n\nfunction fill_project() {\n\tproject_line = document.getElementById('customfield_10509-val').textContent.trim();\n\tproject = project_line.split(' / ')[1]\n\tdocument.getElementById(\"comment-popup\").value= project + ': ';\n}\n\n// Timesheet helper \njQuery.expr[':'].regex = function(elem, index, match) {\n    var matchParams = match[3].split(','),\n        validLabels = /^(data|css):/,\n        attr = {\n            method: matchParams[0].match(validLabels) ? \n                        matchParams[0].split(':')[0] : 'attr',\n            property: matchParams.shift().replace(validLabels,'')\n        },\n        regexFlags = 'ig',\n        regex = new RegExp(matchParams.join('').replace(/^\\s+|\\s+$/g,''), regexFlags);\n    return regex.test(jQuery(elem)[attr.method](attr.property));\n}\n\n$(\"th:regex(class, ^day [0-9][0-9][0-9][0-9])\").each(\n\tfunction() {\n\t\tthis.style.color = \"white\";\n\t\tthis.style.fontWeight = \"1000\";\n\t\tif (this.innerHTML < 5 && this.innerHTML !== \"\") {\n\t\t\tthis.style.backgroundColor = \"#FF6E6E\";\n\t\t} else if (this.innerHTML >= 8 && this.innerHTML !== \"\") {\n\t\t\tthis.style.backgroundColor = \"rgb(99, 186, 60)\";\n\t\t} else if (this.innerHTML !== \"\") {\n\t\t\tthis.style.backgroundColor = \"#F9CC37\";\n\t\t}\n\t}\n)\n// remove short days class\n$(\"th[title$='short day']\").each(function() {$(this).removeClass('tt-holiday')})\n\n// add diff line\nvar times = $(\".total-work-bottom td\")\n$(\".total-work-bottom tbody\").append(\"<tr><th>Diff</th><td>\"+(times[2].innerHTML-times[0].innerHTML).toFixed(1)+\"</td><td class='no-border'>\"+(times[3].innerHTML-times[1].innerHTML).toFixed(1)+\"</td></tr>\")\n\n// add predict line\nvar today = new Date();\nvar dd = today.getDate();\nvar weekdays = $(\"th:regex(class, \\\\d\\\\d\\\\d\\\\d (tt-current-day )?normal)\");\nvar working_days = []\nweekdays.each(\n\tfunction() {\n\t\tif ($(this).hasClass('tt-holiday') === false){\n\t\t\tworking_days.indexOf(parseInt($(this).text())) === -1 ? working_days.push(parseInt($(this).text())) : console.log(\"This item already exists\");\n\t\t\t\n\t\t}\n\t}\n)\nvar past_days = working_days.slice(0,working_days.indexOf(dd)+1);\nvar left_days = working_days.slice(working_days.indexOf(dd)+1, working_days.length);\n\nvar predict_color = 'rgb(99, 186, 60)';\nvar predict_percent = (times[1].innerHTML/past_days.length*working_days.length)/times[3].innerHTML;\nif (predict_percent >= 0.9 && predict_percent < 1) {\n\tpredict_color = \"#eaab11\"\n} else if (predict_percent < 0.9){\n\tpredict_color = \"rgb(255, 110, 110)\"\n}\n\n$(\".total-work-bottom tbody\").append(`\n            <tr>\n                <th>Prediction</th>\n                <th style=\"width: 60px;\" class=\"no-border\">Current</th>\n                <th style=\"width: 60px;\">Wanna fix?</th>\n            </tr>\n            `)\n$(\".total-work-bottom tbody\").append(\"<tr><td style='color:\"+predict_color+\"'>\"+(times[1].innerHTML/past_days.length*working_days.length).toFixed(1)+\" total (\"+parseInt(predict_percent*100)+\"%)</td><td> \"+(times[1].innerHTML/past_days.length).toFixed(1)+\" daily</td><td class='no-border'>\"+((times[3].innerHTML-times[1].innerHTML)/left_days.length).toFixed(1)+\" daily</td></tr>\")\n\n\n\t","libs":[],"options":{"altCSS":false,"altJS":false,"autoImportant":false,"on":true}}]}